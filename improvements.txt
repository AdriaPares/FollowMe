# Cassandra

Some best practices:
https://aws.amazon.com/blogs/big-data/best-practices-for-running-apache-cassandra-on-amazon-ec2/

Deployments and configurations:
http://cloudurable.com/blog/cassandra-aws-cpu-requirements/index.html

A cool article on anti-patterns:
https://www.datastax.com/dev/blog/how-not-to-benchmark-cassandra

- Back-ups in S3.
- Separate cluster in 3 availability zones to survive failure of one Availability Zone
- Choosing Ec2MultiRegionSnitch for scalability from the beginning?
- Separate volumes containing logs and data
- EBS is not recommended for Cassandra storage if you do more than 100 IOPS (we do about 30k IOPS).
- Improve fault-tolerance for read and write by changing queries (read/write) policy (one, two, quorum, all...)
- Add cluster addresses as a config file to be read by the scripts

# Spark
- Compact 9 files into a single file, modularize the functions
- Is findspark.init() required?
- Is Spark even required? Look into Cassandra batches.
- c5.large workers are maybe too overpowered for our use case?

# Kafka

# Pulsar

# Airflow

# Python & Generic

- Add try excepts to file reading
- Call dictionaries with .get()
- Add function comments
- Refactor naming and positioning